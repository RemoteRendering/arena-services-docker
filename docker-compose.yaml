version: '3'

services:

  arena-web: # create a container named "arena-web"; other service containers in this file can resolve its name (arena-web)
    image: "nginx" # creates container from nginx
    volumes:
      - ./ARENA-core:/usr/share/nginx/html # mount root html from ./ARENA-core
      - ../dev/ARENA-core:/usr/share/nginx/html/dev # mount dev folder
      - ./conf/arena-defaults.js:/usr/share/nginx/html/defaults.js # set arena client code defaults
      - ./conf/nginx-conf.d:/etc/nginx/conf.d # mount local nginx.conf.d folder to /etc/nginx/conf.d in the container
      - ./data/certbot/conf:/etc/letsencrypt # mount certbot files (used in conf/nginx-conf.d/arena-web.conf)
      - ./data/certbot/www:/var/www/certbot # mount certbot files (used in conf/nginx-conf.d/arena-web.conf)
      - arts-static-content:/usr/share/nginx/html/arts # serve arts static files
      - mosq-static-content:/usr/share/nginx/html/network # serve mosquitto static files
    ports:
      - "80:80" # map port 80 on the host to port 80 on the container
      - "443:443"
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'" # reload certificates every 6h
    depends_on:
      - mqtt
      - arena-persist
      - store
      - arts
    restart: unless-stopped # service will respawn unless we tell docker to stop it

  certbot:
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt # mount certbot files; certificate files will be here
      - ./data/certbot/www:/var/www/certbot # mount certbot files;
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'" # check for certificate updates every 12h

  mongodb:
    image: mongo # pull from https://hub.docker.com/_/mongo/
    volumes:
      - ./data/mongodb:/data/db # permanent storage on the host
    restart: unless-stopped

  arena-persist:
    build: "arena-persist" # builds container from arena-persist Dockerfile
    user: "node"
    #ports:
    #  - 8884:8884/tcp
    volumes:
      - ./conf/persist-config.json:/home/node/app/config.json # mount updated config.json that uses the container name
    command: "npm start"
    depends_on:
      - mongodb
    restart: unless-stopped

  arena-auth:
    build: "ARENA-auth" # builds container from arena-persist Dockerfile
    user: "root"
    ports:
      - 8888:8888/tcp
    volumes:
      - ./conf/auth-config.json:/home/node/app/config.json # mount updated config.json that uses indicates right paths and secret
      - ./data/certbot/conf:/etc/letsencrypt
    command: "node index.js -c ./config.json"
    restart: unless-stopped

  mqtt:
#    image: eclipse-mosquitto # pulls from https://hub.docker.com/_/eclipse-mosquitto
    image: conixcenter/arena-broker # pulls from https://hub.docker.com/repository/docker/conixcenter/arena-broker
    volumes:
      - ./conf/mosquitto.conf:/mosquitto/config/mosquitto.conf # mount local config file to /mosquitto/config/mosquitto.conf in the container
      - ./data/certbot/conf:/etc/letsencrypt # mount certs volume (see conf/mosquitto.conf to see how the files are used)
      - mosq-static-content:/mosquitto/www/html
    ports:
      - 1883:1883/tcp # mqtt; map port for listner configured in /conf/mosquitto.conf
      - 9001:9001/tcp # mqtt-ws
      - 8083:8083/tcp # mqtt-wss
      - 8883:8883/tcp # mqtt-tls
    restart: unless-stopped

  mqtt-br1:
    image: conixcenter/arena-broker # pulls from https://hub.docker.com/repository/docker/conixcenter/arena-broker
    volumes:
      - ./conf/mosquitto-br-conn.conf:/mosquitto/config/mosquitto.conf # mount local config file to /mosquitto/config/mosquitto.conf in the container
      - ./data/certbot/conf:/etc/letsencrypt # mount certs volume (see conf/mosquitto.conf to see how the files are used)
    restart: unless-stopped

  mqtt-br2:
    image: conixcenter/arena-broker # pulls from https://hub.docker.com/repository/docker/conixcenter/arena-broker
    volumes:
      - ./conf/mosquitto-br-conn.conf:/mosquitto/config/mosquitto.conf # mount local config file to /mosquitto/config/mosquitto.conf in the container
      - ./data/certbot/conf:/etc/letsencrypt # mount certs volume (see conf/mosquitto.conf to see how the files are used)
    restart: unless-stopped

  store:
    image: "conixcenter/arena-store"  # pulls from https://hub.docker.com/repository/docker/conixcenter/arena-store
    volumes:
      - ./conf/arena-store-config.json:/arena-store/.config.json
      - ./ARENA-core/store:/srv-files
      - ./data/arena-store:/arena-store/data
    restart: unless-stopped # service will respawn unless we tell docker to stop it

  arts:
    build: "arts/arts-main"
    volumes:
      - ./conf/arts-settings.py:/usr/src/app/arts_api/settings.py
      - arts-static-content:/usr/src/app/public # static arts vizualization page
    env_file:
      - environment.env
    #ports:
    #  - "8000:8000"
    command: "python manage.py runserver 0.0.0.0:8000"
    restart: unless-stopped # service will respawn unless we tell docker to stop it

  py-runtime:
    build: "arena-runtime-simulated"
    volumes:
      - ./conf/arena-runtime-simulated.conf:/usr/src/app/config.json
    depends_on:
      - arts
    restart: unless-stopped # service will respawn unless we tell docker to stop it

  cadvisor:
    image: gcr.io/google-containers/cadvisor:latest
    ports:
      - 8080:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    restart: unless-stopped # service will respawn unless we tell docker to stop it

  arena-host-stats:
    image: prom/node-exporter:latest
    restart: unless-stopped # service will respawn unless we tell docker to stop it

  prometheus:
    image: prom/prometheus:latest
    user: "root"
    #ports:
    #  - 9090:9090
    volumes:
      - ./conf/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./data/prometheus/:/prometheus/
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
    restart: unless-stopped # service will respawn unless we tell docker to stop it

  grafana:
    image: grafana/grafana:latest
    user: "root"
    ports:
      - 3000:3000
    volumes:
      - ./data/grafana:/var/lib/grafana:rw
    restart: unless-stopped # service will respawn unless we tell docker to stop it

  restarter:
    image: docker
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]
    command: ["/bin/sh", "-c", "while true; do sleep 12h; docker restart py-runtime; done"]
    restart: unless-stopped

  backup:
    image: docker
    user: root
    volumes:
      - ./data:/data
      - ./mongo-backup:/backup
    command: ["/bin/sh", "-c", "while true; do cp -avr /data/mongodb /backup; chown -R 1001:1001 /backup; sleep 12h; done"]
    restart: unless-stopped

volumes:
  arts-static-content:
  mosq-static-content:
